<?xml version="1.0" encoding="UTF-8"?>
<project name="string-db-gen" default="all">

  <property environment="env"/>
  <property file="build.properties"/>

   <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="700m"/>
  <patternset id="ignored.files">
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/*.yarb/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/CVS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.swc"/>
    <include name="*.apk"/>
    <include name="*.zip"/>
    <include name="*.egg"/>
    <include name="*.ane"/>
    <include name="*.jar"/>
    <include name="*.ear"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
    <exclude name="**/?*.aj"/>
  </patternset>

  <!-- Module string-db-gen -->
  
  <dirname property="module.all.basedir" file="${ant.file}"/>

  <property name="compiler.args.string-db-gen" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  <property name="compiler.args.cf" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  <property name="compiler.args.sl" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  <property name="compiler.args.hd" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  <property name="compiler.args.je" value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
  
  <property name="all.output.dir" value="${module.all.basedir}/out/production/all"/>
  <property name="all.testoutput.dir" value="${module.all.basedir}/out/production/all/tests"/>

  <path id="all.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>

  <path id="default.classpath">
    <pathelement location="${user.home}/.m2/repository/commons-cli/commons-cli/1.4/commons-cli-1.4.jar"/>
    <pathelement location="${user.home}/.m2/repository/org/apache/commons/commons-math3/3.0/commons-math3-3.0.jar"/>
    <pathelement location="${user.home}/.m2/repository/org/json/json/20160810/json-20160810.jar"/>
  </path>

  <patternset id="excluded.from.module.default">
    <patternset refid="ignored.files"/>
  </patternset>

  <patternset id="excluded.from.compilation.default">
    <patternset refid="excluded.from.module.default"/>
  </patternset>

  <path id="all.module.sourcepath">
  <dirset dir="${module.all.basedir}">
    <include name="src"/>
  </dirset>
  </path>

  <target name="compile.module.string-db-gen" depends="compile.module.string-db-gen.production,compile.module.string-db-gen.tests" description="Compile module string-db-gen"/>
  <target name="compile.module.cf" depends="compile.module.cf.production,compile.module.cf.tests" description="Compile module cf"/>
  <target name="compile.module.sl" depends="compile.module.sl.production,compile.module.sl.tests" description="Compile module sl"/>
  <target name="compile.module.hd" depends="compile.module.hd.production,compile.module.hd.tests" description="Compile module hd"/>
  <target name="compile.module.je" depends="compile.module.je.production,compile.module.je.tests" description="Compile module je"/>
  
  <target name="compile.module.string-db-gen.production" description="Compile module string-db-gen; production classes">
    <mkdir dir="${all.output.dir}"/>
    <javac includeantruntime="false" destdir="${all.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.string-db-gen}"/>
      <bootclasspath refid="all.module.bootclasspath"/>
      <classpath refid="default.classpath"/>
      <src refid="all.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.default"/>
    </javac>
    <copy todir="${all.output.dir}">
      <fileset dir="${module.all.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
</target>

  <target name="compile.module.cf.production" description="Compile module cf; production classes">
    <mkdir dir="${all.output.dir}"/>
    <javac includeantruntime="false" destdir="${all.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.cf}"/>
      <bootclasspath refid="all.module.bootclasspath"/>
      <classpath refid="default.classpath"/>
      <src refid="all.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.default"/>
    </javac>

    <copy todir="${all.output.dir}">
      <fileset dir="${module.all.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>


  <target name="compile.module.sl.production" description="Compile module sl; production classes">
    <mkdir dir="${all.output.dir}"/>
    <javac includeantruntime="false" destdir="${all.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.sl}"/>
      <bootclasspath refid="all.module.bootclasspath"/>
      <classpath refid="default.classpath"/>
      <src refid="all.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.default"/>
    </javac>
    <copy todir="${all.output.dir}">
      <fileset dir="${module.all.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.hd.production" description="Compile module hd; production classes">
    <mkdir dir="${all.output.dir}"/>
    <javac includeantruntime="false" destdir="${all.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.hd}"/>
      <bootclasspath refid="all.module.bootclasspath"/>
      <classpath refid="default.classpath"/>
      <src refid="all.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.default"/>
    </javac>
    <copy todir="${all.output.dir}">
      <fileset dir="${module.all.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>

  <target name="compile.module.je.production" description="Compile module je; production classes">
    <mkdir dir="${all.output.dir}"/>
    <javac includeantruntime="false" destdir="${all.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.hd}"/>
      <bootclasspath refid="all.module.bootclasspath"/>
      <classpath refid="default.classpath"/>
      <src refid="all.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.default"/>
    </javac>
    <copy todir="${all.output.dir}">
      <fileset dir="${module.all.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.string-db-gen.tests" depends="compile.module.string-db-gen.production" description="compile module string-db-gen; test classes" unless="skip.tests"/>
  <target name="compile.module.cf.tests" depends="compile.module.cf.production" description="compile module cf; test classes" unless="skip.tests"/>
  <target name="compile.module.sl.tests" depends="compile.module.sl.production" description="compile module sl; test classes" unless="skip.tests"/>
  <target name="compile.module.hd.tests" depends="compile.module.hd.production" description="compile module hd; test classes" unless="skip.tests"/>
  <target name="compile.module.je.tests" depends="compile.module.je.production" description="compile module je; test classes" unless="skip.tests"/>


  <target name="clean.modules" description="cleanup modules">
    <delete dir="${all.output.dir}"/>
    <delete dir="${all.testoutput.dir}"/>
  </target>

  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.modules" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.string-db-gen, compile.module.cf,
                                        compile.module.sl, compile.module.hd, compile.module.je"
                               description="build all modules"/>
  
  <target name="init.artifacts">
    <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
    <property name="artifact.output.string-db-gen:jar" value="${basedir}/build"/>
    <property name="artifact.output.cf:jar" value="${basedir}/build"/>
    <property name="artifact.output.sl:jar" value="${basedir}/build"/>
    <property name="artifact.output.hd:jar" value="${basedir}/build"/>
    <property name="artifact.output.je:jar" value="${basedir}/build"/>
    <mkdir dir="${artifacts.temp.dir}"/>
    <property name="temp.jar.path.string-db-gen.jar" value="${artifacts.temp.dir}/string-db-gen.jar"/>
    <property name="temp.jar.path.cf.jar" value="${artifacts.temp.dir}/cf.jar"/>
    <property name="temp.jar.path.sl.jar" value="${artifacts.temp.dir}/sl.jar"/>
    <property name="temp.jar.path.hd.jar" value="${artifacts.temp.dir}/hd.jar"/>
    <property name="temp.jar.path.je.jar" value="${artifacts.temp.dir}/hd.jar"/>
  </target>
  
  <target name="artifact.string-db-gen:jar" depends="init.artifacts, compile.module.string-db-gen" description="Build &#39;string-db-gen:jar&#39; artifact">
    <property name="artifact.temp.output.string-db-gen:jar" value="${artifacts.temp.dir}/string_db_gen_jar"/>
    <mkdir dir="${artifact.temp.output.string-db-gen:jar}"/>
    <jar destfile="${temp.jar.path.string-db-gen.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${all.output.dir}"/>
      <zipfileset src="${user.home}/.m2/repository/org/apache/commons/commons-math3/3.0/commons-math3-3.0.jar"/>
      <zipfileset src="${user.home}/.m2/repository/commons-cli/commons-cli/1.4/commons-cli-1.4.jar"/>
      <zipfileset src="${user.home}/.m2/repository/commons-cli/commons-cli/1.4/commons-cli-1.4.jar"/>
      <zipfileset src="${user.home}/.m2/repository/org/json/json/20160810/json-20160810.jar"/>
      <manifest>
        <attribute name="Main-Class" value="com.geckodb.misc.Main"/>
      </manifest>
    </jar>
    <copy file="${temp.jar.path.string-db-gen.jar}" tofile="${artifact.temp.output.string-db-gen:jar}/string-db-gen.jar"/>
  </target>

  <target name="artifact.cf:jar" depends="init.artifacts, compile.module.cf" description="Build &#39;cf:jar&#39; artifact">
    <property name="artifact.temp.output.cf:jar" value="${artifacts.temp.dir}/cf"/>
    <mkdir dir="${artifact.temp.output.cf:jar}"/>
    <jar destfile="${temp.jar.path.cf.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${all.output.dir}"/>
      <zipfileset src="${user.home}/.m2/repository/org/apache/commons/commons-math3/3.0/commons-math3-3.0.jar"/>
      <zipfileset src="${user.home}/.m2/repository/commons-cli/commons-cli/1.4/commons-cli-1.4.jar"/>
      <zipfileset src="${user.home}/.m2/repository/org/json/json/20160810/json-20160810.jar"/>
      <manifest>
        <attribute name="Main-Class" value="com.geckodb.misc.tools.CharacterFrequency"/>
      </manifest>
    </jar>
    <copy file="${temp.jar.path.cf.jar}" tofile="${artifact.temp.output.cf:jar}/cf.jar"/>
  </target>

  <target name="artifact.sl:jar" depends="init.artifacts, compile.module.sl" description="Build &#39;sl:jar&#39; artifact">
    <property name="artifact.temp.output.sl:jar" value="${artifacts.temp.dir}/sl"/>
    <mkdir dir="${artifact.temp.output.sl:jar}"/>
    <jar destfile="${temp.jar.path.sl.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${all.output.dir}"/>
      <zipfileset src="${user.home}/.m2/repository/org/apache/commons/commons-math3/3.0/commons-math3-3.0.jar"/>
      <zipfileset src="${user.home}/.m2/repository/commons-cli/commons-cli/1.4/commons-cli-1.4.jar"/>
      <zipfileset src="${user.home}/.m2/repository/org/json/json/20160810/json-20160810.jar"/>
      <manifest>
        <attribute name="Main-Class" value="com.geckodb.misc.tools.StringLengths"/>
      </manifest>
    </jar>
    <copy file="${temp.jar.path.sl.jar}" tofile="${artifact.temp.output.sl:jar}/sl.jar"/>
  </target>

  <target name="artifact.hd:jar" depends="init.artifacts, compile.module.hd" description="Build &#39;hd:jar&#39; artifact">
    <property name="artifact.temp.output.hd:jar" value="${artifacts.temp.dir}/hd"/>
    <mkdir dir="${artifact.temp.output.hd:jar}"/>
    <jar destfile="${temp.jar.path.hd.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${all.output.dir}"/>
      <zipfileset src="${user.home}/.m2/repository/org/apache/commons/commons-math3/3.0/commons-math3-3.0.jar"/>
      <zipfileset src="${user.home}/.m2/repository/commons-cli/commons-cli/1.4/commons-cli-1.4.jar"/>
      <zipfileset src="${user.home}/.m2/repository/org/json/json/20160810/json-20160810.jar"/>
      <manifest>
        <attribute name="Main-Class" value="com.geckodb.misc.tools.HistogramDistribution"/>
      </manifest>
    </jar>
    <copy file="${temp.jar.path.hd.jar}" tofile="${artifact.temp.output.hd:jar}/hd.jar"/>
  </target>

  <target name="artifact.je:jar" depends="init.artifacts, compile.module.je" description="Build &#39;je:jar&#39; artifact">
    <property name="artifact.temp.output.je:jar" value="${artifacts.temp.dir}/je"/>
    <mkdir dir="${artifact.temp.output.je:jar}"/>
    <jar destfile="${temp.jar.path.je.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${all.output.dir}"/>
      <zipfileset src="${user.home}/.m2/repository/org/apache/commons/commons-math3/3.0/commons-math3-3.0.jar"/>
      <zipfileset src="${user.home}/.m2/repository/commons-cli/commons-cli/1.4/commons-cli-1.4.jar"/>
      <zipfileset src="${user.home}/.m2/repository/org/json/json/20160810/json-20160810.jar"/>
      <manifest>
        <attribute name="Main-Class" value="com.geckodb.misc.tools.JSONExtract"/>
      </manifest>
    </jar>
    <copy file="${temp.jar.path.je.jar}" tofile="${artifact.temp.output.je:jar}/je.jar"/>
  </target>



  <target name="build.all.artifacts" depends="artifact.string-db-gen:jar, artifact.cf:jar, artifact.sl:jar, artifact.hd:jar, artifact.je:jar" description="Build all artifacts">
    <mkdir dir="${artifact.output.string-db-gen:jar}"/>
    <mkdir dir="${artifact.output.cf:jar}"/>
    <mkdir dir="${artifact.output.sl:jar}"/>
    <mkdir dir="${artifact.output.hd:jar}"/>
    <mkdir dir="${artifact.output.je:jar}"/>
    <copy todir="${artifact.output.string-db-gen:jar}">
      <fileset dir="${artifact.temp.output.string-db-gen:jar}"/>
    </copy>
    <copy todir="${artifact.output.cf:jar}">
      <fileset dir="${artifact.temp.output.cf:jar}"/>
    </copy>
    <copy todir="${artifact.output.sl:jar}">
      <fileset dir="${artifact.temp.output.sl:jar}"/>
    </copy>
    <copy todir="${artifact.output.hd:jar}">
      <fileset dir="${artifact.temp.output.hd:jar}"/>
    </copy>
    <copy todir="${artifact.output.je:jar}">
      <fileset dir="${artifact.temp.output.je:jar}"/>
    </copy>
    
    <!-- Delete temporary files -->
    <delete dir="${artifacts.temp.dir}"/>
  </target>


  
  <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>